// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: control_service/hydrology_control_service.proto

package HL_ControlService_Go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControlValueType int32

const (
	ControlValueType_NONE       ControlValueType = 0
	ControlValueType_NORM       ControlValueType = 1
	ControlValueType_FLOODPLAIN ControlValueType = 2
	ControlValueType_ADVERSE    ControlValueType = 3
	ControlValueType_DANGEROUS  ControlValueType = 4
)

// Enum value maps for ControlValueType.
var (
	ControlValueType_name = map[int32]string{
		0: "NONE",
		1: "NORM",
		2: "FLOODPLAIN",
		3: "ADVERSE",
		4: "DANGEROUS",
	}
	ControlValueType_value = map[string]int32{
		"NONE":       0,
		"NORM":       1,
		"FLOODPLAIN": 2,
		"ADVERSE":    3,
		"DANGEROUS":  4,
	}
)

func (x ControlValueType) Enum() *ControlValueType {
	p := new(ControlValueType)
	*p = x
	return p
}

func (x ControlValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_hydrology_control_service_proto_enumTypes[0].Descriptor()
}

func (ControlValueType) Type() protoreflect.EnumType {
	return &file_control_service_hydrology_control_service_proto_enumTypes[0]
}

func (x ControlValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlValueType.Descriptor instead.
func (ControlValueType) EnumDescriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{0}
}

type ControlValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PostCode  string                 `protobuf:"bytes,2,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Type      ControlValueType       `protobuf:"varint,3,opt,name=type,proto3,enum=hydrologycontrol.ControlValueType" json:"type,omitempty"`
	DateStart *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	Value     uint32                 `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ControlValue) Reset() {
	*x = ControlValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlValue) ProtoMessage() {}

func (x *ControlValue) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlValue.ProtoReflect.Descriptor instead.
func (*ControlValue) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{0}
}

func (x *ControlValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ControlValue) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *ControlValue) GetType() ControlValueType {
	if x != nil {
		return x.Type
	}
	return ControlValueType_NONE
}

func (x *ControlValue) GetDateStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *ControlValue) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StatsDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Norm       uint32                 `protobuf:"varint,2,opt,name=norm,proto3" json:"norm,omitempty"`
	Floodplain uint32                 `protobuf:"varint,3,opt,name=floodplain,proto3" json:"floodplain,omitempty"`
	Adverse    uint32                 `protobuf:"varint,4,opt,name=adverse,proto3" json:"adverse,omitempty"`
	Dangerous  uint32                 `protobuf:"varint,5,opt,name=dangerous,proto3" json:"dangerous,omitempty"`
	Waterlevel *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=waterlevel,proto3" json:"waterlevel,omitempty"`
}

func (x *StatsDay) Reset() {
	*x = StatsDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsDay) ProtoMessage() {}

func (x *StatsDay) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsDay.ProtoReflect.Descriptor instead.
func (*StatsDay) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{1}
}

func (x *StatsDay) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *StatsDay) GetNorm() uint32 {
	if x != nil {
		return x.Norm
	}
	return 0
}

func (x *StatsDay) GetFloodplain() uint32 {
	if x != nil {
		return x.Floodplain
	}
	return 0
}

func (x *StatsDay) GetAdverse() uint32 {
	if x != nil {
		return x.Adverse
	}
	return 0
}

func (x *StatsDay) GetDangerous() uint32 {
	if x != nil {
		return x.Dangerous
	}
	return 0
}

func (x *StatsDay) GetWaterlevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.Waterlevel
	}
	return nil
}

type AddControlValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostCode  string                 `protobuf:"bytes,1,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Type      ControlValueType       `protobuf:"varint,2,opt,name=type,proto3,enum=hydrologycontrol.ControlValueType" json:"type,omitempty"`
	DateStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	Value     uint32                 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AddControlValueRequest) Reset() {
	*x = AddControlValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddControlValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddControlValueRequest) ProtoMessage() {}

func (x *AddControlValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddControlValueRequest.ProtoReflect.Descriptor instead.
func (*AddControlValueRequest) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{2}
}

func (x *AddControlValueRequest) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *AddControlValueRequest) GetType() ControlValueType {
	if x != nil {
		return x.Type
	}
	return ControlValueType_NONE
}

func (x *AddControlValueRequest) GetDateStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *AddControlValueRequest) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AddControlValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlValue *ControlValue `protobuf:"bytes,1,opt,name=control_value,json=controlValue,proto3" json:"control_value,omitempty"`
}

func (x *AddControlValueResponse) Reset() {
	*x = AddControlValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddControlValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddControlValueResponse) ProtoMessage() {}

func (x *AddControlValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddControlValueResponse.ProtoReflect.Descriptor instead.
func (*AddControlValueResponse) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{3}
}

func (x *AddControlValueResponse) GetControlValue() *ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

type RemoveControlValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveControlValueRequest) Reset() {
	*x = RemoveControlValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveControlValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveControlValueRequest) ProtoMessage() {}

func (x *RemoveControlValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveControlValueRequest.ProtoReflect.Descriptor instead.
func (*RemoveControlValueRequest) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveControlValueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveControlValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RemoveControlValueResponse) Reset() {
	*x = RemoveControlValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveControlValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveControlValueResponse) ProtoMessage() {}

func (x *RemoveControlValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveControlValueResponse.ProtoReflect.Descriptor instead.
func (*RemoveControlValueResponse) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveControlValueResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateControlValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlValues []*ControlValue `protobuf:"bytes,1,rep,name=control_values,json=controlValues,proto3" json:"control_values,omitempty"`
}

func (x *UpdateControlValueRequest) Reset() {
	*x = UpdateControlValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateControlValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateControlValueRequest) ProtoMessage() {}

func (x *UpdateControlValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateControlValueRequest.ProtoReflect.Descriptor instead.
func (*UpdateControlValueRequest) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateControlValueRequest) GetControlValues() []*ControlValue {
	if x != nil {
		return x.ControlValues
	}
	return nil
}

type UpdateControlValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlValues []*ControlValue `protobuf:"bytes,1,rep,name=control_values,json=controlValues,proto3" json:"control_values,omitempty"`
}

func (x *UpdateControlValueResponse) Reset() {
	*x = UpdateControlValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateControlValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateControlValueResponse) ProtoMessage() {}

func (x *UpdateControlValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateControlValueResponse.ProtoReflect.Descriptor instead.
func (*UpdateControlValueResponse) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateControlValueResponse) GetControlValues() []*ControlValue {
	if x != nil {
		return x.ControlValues
	}
	return nil
}

type GetControlValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostCode string           `protobuf:"bytes,1,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Type     ControlValueType `protobuf:"varint,2,opt,name=type,proto3,enum=hydrologycontrol.ControlValueType" json:"type,omitempty"`
	Page     uint32           `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetControlValuesRequest) Reset() {
	*x = GetControlValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlValuesRequest) ProtoMessage() {}

func (x *GetControlValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlValuesRequest.ProtoReflect.Descriptor instead.
func (*GetControlValuesRequest) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetControlValuesRequest) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *GetControlValuesRequest) GetType() ControlValueType {
	if x != nil {
		return x.Type
	}
	return ControlValueType_NONE
}

func (x *GetControlValuesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetControlValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          uint32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	MaxPage       uint32          `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	ControlValues []*ControlValue `protobuf:"bytes,3,rep,name=control_values,json=controlValues,proto3" json:"control_values,omitempty"`
}

func (x *GetControlValuesResponse) Reset() {
	*x = GetControlValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlValuesResponse) ProtoMessage() {}

func (x *GetControlValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlValuesResponse.ProtoReflect.Descriptor instead.
func (*GetControlValuesResponse) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetControlValuesResponse) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetControlValuesResponse) GetMaxPage() uint32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *GetControlValuesResponse) GetControlValues() []*ControlValue {
	if x != nil {
		return x.ControlValues
	}
	return nil
}

type CheckWaterLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	PostCode string                 `protobuf:"bytes,2,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Value    uint32                 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CheckWaterLevelRequest) Reset() {
	*x = CheckWaterLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckWaterLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckWaterLevelRequest) ProtoMessage() {}

func (x *CheckWaterLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckWaterLevelRequest.ProtoReflect.Descriptor instead.
func (*CheckWaterLevelRequest) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{10}
}

func (x *CheckWaterLevelRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CheckWaterLevelRequest) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *CheckWaterLevelRequest) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CheckWaterLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Excess uint32 `protobuf:"varint,1,opt,name=excess,proto3" json:"excess,omitempty"`
}

func (x *CheckWaterLevelResponse) Reset() {
	*x = CheckWaterLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckWaterLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckWaterLevelResponse) ProtoMessage() {}

func (x *CheckWaterLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckWaterLevelResponse.ProtoReflect.Descriptor instead.
func (*CheckWaterLevelResponse) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{11}
}

func (x *CheckWaterLevelResponse) GetExcess() uint32 {
	if x != nil {
		return x.Excess
	}
	return 0
}

type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostCode    string                 `protobuf:"bytes,1,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	StartDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	GraphPoints uint32                 `protobuf:"varint,4,opt,name=graph_points,json=graphPoints,proto3" json:"graph_points,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetStatsRequest) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *GetStatsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetStatsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetStatsRequest) GetGraphPoints() uint32 {
	if x != nil {
		return x.GraphPoints
	}
	return 0
}

type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartInterval *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_interval,json=startInterval,proto3" json:"start_interval,omitempty"`
	Stats         []*StatsDay            `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_service_hydrology_control_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_hydrology_control_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_control_service_hydrology_control_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetStatsResponse) GetStartInterval() *timestamppb.Timestamp {
	if x != nil {
		return x.StartInterval
	}
	return nil
}

func (x *GetStatsResponse) GetStats() []*StatsDay {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_control_service_hydrology_control_service_proto protoreflect.FileDescriptor

var file_control_service_hydrology_control_service_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x6f, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5e, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x64, 0x72,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61,
	0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2a, 0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x52, 0x4d, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x32, 0x87, 0x05, 0x0a,
	0x15, 0x48, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x2e, 0x68, 0x79, 0x64, 0x72,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28,
	0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x41, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x48, 0x6f,
	0x6b, 0x61, 0x67, 0x65, 0x2f, 0x48, 0x4c, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x47, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_control_service_hydrology_control_service_proto_rawDescOnce sync.Once
	file_control_service_hydrology_control_service_proto_rawDescData = file_control_service_hydrology_control_service_proto_rawDesc
)

func file_control_service_hydrology_control_service_proto_rawDescGZIP() []byte {
	file_control_service_hydrology_control_service_proto_rawDescOnce.Do(func() {
		file_control_service_hydrology_control_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_control_service_hydrology_control_service_proto_rawDescData)
	})
	return file_control_service_hydrology_control_service_proto_rawDescData
}

var file_control_service_hydrology_control_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_control_service_hydrology_control_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_control_service_hydrology_control_service_proto_goTypes = []interface{}{
	(ControlValueType)(0),              // 0: hydrologycontrol.ControlValueType
	(*ControlValue)(nil),               // 1: hydrologycontrol.ControlValue
	(*StatsDay)(nil),                   // 2: hydrologycontrol.StatsDay
	(*AddControlValueRequest)(nil),     // 3: hydrologycontrol.AddControlValueRequest
	(*AddControlValueResponse)(nil),    // 4: hydrologycontrol.AddControlValueResponse
	(*RemoveControlValueRequest)(nil),  // 5: hydrologycontrol.RemoveControlValueRequest
	(*RemoveControlValueResponse)(nil), // 6: hydrologycontrol.RemoveControlValueResponse
	(*UpdateControlValueRequest)(nil),  // 7: hydrologycontrol.UpdateControlValueRequest
	(*UpdateControlValueResponse)(nil), // 8: hydrologycontrol.UpdateControlValueResponse
	(*GetControlValuesRequest)(nil),    // 9: hydrologycontrol.GetControlValuesRequest
	(*GetControlValuesResponse)(nil),   // 10: hydrologycontrol.GetControlValuesResponse
	(*CheckWaterLevelRequest)(nil),     // 11: hydrologycontrol.CheckWaterLevelRequest
	(*CheckWaterLevelResponse)(nil),    // 12: hydrologycontrol.CheckWaterLevelResponse
	(*GetStatsRequest)(nil),            // 13: hydrologycontrol.GetStatsRequest
	(*GetStatsResponse)(nil),           // 14: hydrologycontrol.GetStatsResponse
	(*timestamppb.Timestamp)(nil),      // 15: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),      // 16: google.protobuf.Int32Value
}
var file_control_service_hydrology_control_service_proto_depIdxs = []int32{
	0,  // 0: hydrologycontrol.ControlValue.type:type_name -> hydrologycontrol.ControlValueType
	15, // 1: hydrologycontrol.ControlValue.date_start:type_name -> google.protobuf.Timestamp
	15, // 2: hydrologycontrol.StatsDay.date:type_name -> google.protobuf.Timestamp
	16, // 3: hydrologycontrol.StatsDay.waterlevel:type_name -> google.protobuf.Int32Value
	0,  // 4: hydrologycontrol.AddControlValueRequest.type:type_name -> hydrologycontrol.ControlValueType
	15, // 5: hydrologycontrol.AddControlValueRequest.date_start:type_name -> google.protobuf.Timestamp
	1,  // 6: hydrologycontrol.AddControlValueResponse.control_value:type_name -> hydrologycontrol.ControlValue
	1,  // 7: hydrologycontrol.UpdateControlValueRequest.control_values:type_name -> hydrologycontrol.ControlValue
	1,  // 8: hydrologycontrol.UpdateControlValueResponse.control_values:type_name -> hydrologycontrol.ControlValue
	0,  // 9: hydrologycontrol.GetControlValuesRequest.type:type_name -> hydrologycontrol.ControlValueType
	1,  // 10: hydrologycontrol.GetControlValuesResponse.control_values:type_name -> hydrologycontrol.ControlValue
	15, // 11: hydrologycontrol.CheckWaterLevelRequest.date:type_name -> google.protobuf.Timestamp
	15, // 12: hydrologycontrol.GetStatsRequest.start_date:type_name -> google.protobuf.Timestamp
	15, // 13: hydrologycontrol.GetStatsRequest.end_date:type_name -> google.protobuf.Timestamp
	15, // 14: hydrologycontrol.GetStatsResponse.start_interval:type_name -> google.protobuf.Timestamp
	2,  // 15: hydrologycontrol.GetStatsResponse.stats:type_name -> hydrologycontrol.StatsDay
	3,  // 16: hydrologycontrol.HydrologyStatsService.AddControlValue:input_type -> hydrologycontrol.AddControlValueRequest
	5,  // 17: hydrologycontrol.HydrologyStatsService.RemoveControlValue:input_type -> hydrologycontrol.RemoveControlValueRequest
	7,  // 18: hydrologycontrol.HydrologyStatsService.UpdateControlValue:input_type -> hydrologycontrol.UpdateControlValueRequest
	9,  // 19: hydrologycontrol.HydrologyStatsService.GetControlValues:input_type -> hydrologycontrol.GetControlValuesRequest
	11, // 20: hydrologycontrol.HydrologyStatsService.CheckWaterLevel:input_type -> hydrologycontrol.CheckWaterLevelRequest
	13, // 21: hydrologycontrol.HydrologyStatsService.GetStats:input_type -> hydrologycontrol.GetStatsRequest
	4,  // 22: hydrologycontrol.HydrologyStatsService.AddControlValue:output_type -> hydrologycontrol.AddControlValueResponse
	6,  // 23: hydrologycontrol.HydrologyStatsService.RemoveControlValue:output_type -> hydrologycontrol.RemoveControlValueResponse
	8,  // 24: hydrologycontrol.HydrologyStatsService.UpdateControlValue:output_type -> hydrologycontrol.UpdateControlValueResponse
	10, // 25: hydrologycontrol.HydrologyStatsService.GetControlValues:output_type -> hydrologycontrol.GetControlValuesResponse
	12, // 26: hydrologycontrol.HydrologyStatsService.CheckWaterLevel:output_type -> hydrologycontrol.CheckWaterLevelResponse
	14, // 27: hydrologycontrol.HydrologyStatsService.GetStats:output_type -> hydrologycontrol.GetStatsResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_control_service_hydrology_control_service_proto_init() }
func file_control_service_hydrology_control_service_proto_init() {
	if File_control_service_hydrology_control_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_control_service_hydrology_control_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddControlValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddControlValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveControlValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveControlValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateControlValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateControlValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckWaterLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckWaterLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_service_hydrology_control_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_control_service_hydrology_control_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_control_service_hydrology_control_service_proto_goTypes,
		DependencyIndexes: file_control_service_hydrology_control_service_proto_depIdxs,
		EnumInfos:         file_control_service_hydrology_control_service_proto_enumTypes,
		MessageInfos:      file_control_service_hydrology_control_service_proto_msgTypes,
	}.Build()
	File_control_service_hydrology_control_service_proto = out.File
	file_control_service_hydrology_control_service_proto_rawDesc = nil
	file_control_service_hydrology_control_service_proto_goTypes = nil
	file_control_service_hydrology_control_service_proto_depIdxs = nil
}
