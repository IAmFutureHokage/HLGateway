// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: proto/hydrology_buffer_service.proto

package HL_BufferService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IcePhenomeniaState int32

const (
	IcePhenomeniaState_TRUE       IcePhenomeniaState = 0
	IcePhenomeniaState_END        IcePhenomeniaState = 1
	IcePhenomeniaState_NULL_STATE IcePhenomeniaState = 3
)

// Enum value maps for IcePhenomeniaState.
var (
	IcePhenomeniaState_name = map[int32]string{
		0: "TRUE",
		1: "END",
		3: "NULL_STATE",
	}
	IcePhenomeniaState_value = map[string]int32{
		"TRUE":       0,
		"END":        1,
		"NULL_STATE": 3,
	}
)

func (x IcePhenomeniaState) Enum() *IcePhenomeniaState {
	p := new(IcePhenomeniaState)
	*p = x
	return p
}

func (x IcePhenomeniaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IcePhenomeniaState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_hydrology_buffer_service_proto_enumTypes[0].Descriptor()
}

func (IcePhenomeniaState) Type() protoreflect.EnumType {
	return &file_proto_hydrology_buffer_service_proto_enumTypes[0]
}

func (x IcePhenomeniaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IcePhenomeniaState.Descriptor instead.
func (IcePhenomeniaState) EnumDescriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{0}
}

type SnowHeight int32

const (
	SnowHeight_NULL          SnowHeight = 0
	SnowHeight_LESS_5        SnowHeight = 1
	SnowHeight_FROM_5_TO_10  SnowHeight = 2
	SnowHeight_FROM_11_TO_15 SnowHeight = 3
	SnowHeight_FROM_16_TO_20 SnowHeight = 4
	SnowHeight_FROM_21_TO_25 SnowHeight = 5
	SnowHeight_FROM_26_TO_35 SnowHeight = 6
	SnowHeight_FROM_36_TO_50 SnowHeight = 7
	SnowHeight_FROM_51_TO_70 SnowHeight = 8
	SnowHeight_MORE_70       SnowHeight = 9
)

// Enum value maps for SnowHeight.
var (
	SnowHeight_name = map[int32]string{
		0: "NULL",
		1: "LESS_5",
		2: "FROM_5_TO_10",
		3: "FROM_11_TO_15",
		4: "FROM_16_TO_20",
		5: "FROM_21_TO_25",
		6: "FROM_26_TO_35",
		7: "FROM_36_TO_50",
		8: "FROM_51_TO_70",
		9: "MORE_70",
	}
	SnowHeight_value = map[string]int32{
		"NULL":          0,
		"LESS_5":        1,
		"FROM_5_TO_10":  2,
		"FROM_11_TO_15": 3,
		"FROM_16_TO_20": 4,
		"FROM_21_TO_25": 5,
		"FROM_26_TO_35": 6,
		"FROM_36_TO_50": 7,
		"FROM_51_TO_70": 8,
		"MORE_70":       9,
	}
)

func (x SnowHeight) Enum() *SnowHeight {
	p := new(SnowHeight)
	*p = x
	return p
}

func (x SnowHeight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnowHeight) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_hydrology_buffer_service_proto_enumTypes[1].Descriptor()
}

func (SnowHeight) Type() protoreflect.EnumType {
	return &file_proto_hydrology_buffer_service_proto_enumTypes[1]
}

func (x SnowHeight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnowHeight.Descriptor instead.
func (SnowHeight) EnumDescriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{1}
}

type PrecipitationDuration int32

const (
	PrecipitationDuration_EMPTY        PrecipitationDuration = 0
	PrecipitationDuration_LESS_1       PrecipitationDuration = 1
	PrecipitationDuration_FROM_1_TO_3  PrecipitationDuration = 2
	PrecipitationDuration_FROM_3_TO_6  PrecipitationDuration = 3
	PrecipitationDuration_FROM_6_TO_12 PrecipitationDuration = 4
	PrecipitationDuration_MORE_12      PrecipitationDuration = 5
)

// Enum value maps for PrecipitationDuration.
var (
	PrecipitationDuration_name = map[int32]string{
		0: "EMPTY",
		1: "LESS_1",
		2: "FROM_1_TO_3",
		3: "FROM_3_TO_6",
		4: "FROM_6_TO_12",
		5: "MORE_12",
	}
	PrecipitationDuration_value = map[string]int32{
		"EMPTY":        0,
		"LESS_1":       1,
		"FROM_1_TO_3":  2,
		"FROM_3_TO_6":  3,
		"FROM_6_TO_12": 4,
		"MORE_12":      5,
	}
)

func (x PrecipitationDuration) Enum() *PrecipitationDuration {
	p := new(PrecipitationDuration)
	*p = x
	return p
}

func (x PrecipitationDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrecipitationDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_hydrology_buffer_service_proto_enumTypes[2].Descriptor()
}

func (PrecipitationDuration) Type() protoreflect.EnumType {
	return &file_proto_hydrology_buffer_service_proto_enumTypes[2]
}

func (x PrecipitationDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrecipitationDuration.Descriptor instead.
func (PrecipitationDuration) EnumDescriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{2}
}

type Telegram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId                  string                  `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	TelegramCode             string                  `protobuf:"bytes,3,opt,name=telegram_code,json=telegramCode,proto3" json:"telegram_code,omitempty"`
	PostCode                 string                  `protobuf:"bytes,4,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Datetime                 *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
	IsDangerous              bool                    `protobuf:"varint,6,opt,name=is_dangerous,json=isDangerous,proto3" json:"is_dangerous,omitempty"`
	WaterLevelOnTime         *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=water_level_on_time,json=waterLevelOnTime,proto3" json:"water_level_on_time,omitempty"`
	DeltaWaterLevel          *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=delta_water_level,json=deltaWaterLevel,proto3" json:"delta_water_level,omitempty"`
	WaterLevelOn20H          *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=water_level_on20h,json=waterLevelOn20h,proto3" json:"water_level_on20h,omitempty"`
	WaterTemperature         *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=water_temperature,json=waterTemperature,proto3" json:"water_temperature,omitempty"`
	AirTemperature           *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=air_temperature,json=airTemperature,proto3" json:"air_temperature,omitempty"`
	IcePhenomeniaState       *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=ice_phenomenia_state,json=icePhenomeniaState,proto3" json:"ice_phenomenia_state,omitempty"`
	IcePhenomenias           []*IcePhenomenia        `protobuf:"bytes,13,rep,name=ice_phenomenias,json=icePhenomenias,proto3" json:"ice_phenomenias,omitempty"`
	IceHeight                *wrapperspb.Int32Value  `protobuf:"bytes,14,opt,name=ice_height,json=iceHeight,proto3" json:"ice_height,omitempty"`
	SnowHeight               *wrapperspb.Int32Value  `protobuf:"bytes,15,opt,name=snow_height,json=snowHeight,proto3" json:"snow_height,omitempty"`
	WaterFlow                *wrapperspb.DoubleValue `protobuf:"bytes,16,opt,name=water_flow,json=waterFlow,proto3" json:"water_flow,omitempty"`
	PrecipitationValue       *wrapperspb.DoubleValue `protobuf:"bytes,17,opt,name=precipitation_value,json=precipitationValue,proto3" json:"precipitation_value,omitempty"`
	PrecipitationDuration    *wrapperspb.Int32Value  `protobuf:"bytes,18,opt,name=precipitation_duration,json=precipitationDuration,proto3" json:"precipitation_duration,omitempty"`
	ReservoirDate            *timestamppb.Timestamp  `protobuf:"bytes,19,opt,name=reservoir_date,json=reservoirDate,proto3" json:"reservoir_date,omitempty"`
	HeadwaterLevel           *wrapperspb.Int32Value  `protobuf:"bytes,20,opt,name=headwater_level,json=headwaterLevel,proto3" json:"headwater_level,omitempty"`
	AverageReservoirLevel    *wrapperspb.Int32Value  `protobuf:"bytes,21,opt,name=average_reservoir_level,json=averageReservoirLevel,proto3" json:"average_reservoir_level,omitempty"`
	DownstreamLevel          *wrapperspb.Int32Value  `protobuf:"bytes,22,opt,name=downstream_level,json=downstreamLevel,proto3" json:"downstream_level,omitempty"`
	ReservoirVolume          *wrapperspb.DoubleValue `protobuf:"bytes,23,opt,name=reservoir_volume,json=reservoirVolume,proto3" json:"reservoir_volume,omitempty"`
	ReservoirWaterInflowDate *timestamppb.Timestamp  `protobuf:"bytes,24,opt,name=reservoir_water_inflow_date,json=reservoirWaterInflowDate,proto3" json:"reservoir_water_inflow_date,omitempty"`
	Inflow                   *wrapperspb.DoubleValue `protobuf:"bytes,25,opt,name=inflow,proto3" json:"inflow,omitempty"`
	Reset_                   *wrapperspb.DoubleValue `protobuf:"bytes,26,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (x *Telegram) Reset() {
	*x = Telegram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telegram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telegram) ProtoMessage() {}

func (x *Telegram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telegram.ProtoReflect.Descriptor instead.
func (*Telegram) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{0}
}

func (x *Telegram) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Telegram) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Telegram) GetTelegramCode() string {
	if x != nil {
		return x.TelegramCode
	}
	return ""
}

func (x *Telegram) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *Telegram) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *Telegram) GetIsDangerous() bool {
	if x != nil {
		return x.IsDangerous
	}
	return false
}

func (x *Telegram) GetWaterLevelOnTime() *wrapperspb.Int32Value {
	if x != nil {
		return x.WaterLevelOnTime
	}
	return nil
}

func (x *Telegram) GetDeltaWaterLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.DeltaWaterLevel
	}
	return nil
}

func (x *Telegram) GetWaterLevelOn20H() *wrapperspb.Int32Value {
	if x != nil {
		return x.WaterLevelOn20H
	}
	return nil
}

func (x *Telegram) GetWaterTemperature() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WaterTemperature
	}
	return nil
}

func (x *Telegram) GetAirTemperature() *wrapperspb.Int32Value {
	if x != nil {
		return x.AirTemperature
	}
	return nil
}

func (x *Telegram) GetIcePhenomeniaState() *wrapperspb.Int32Value {
	if x != nil {
		return x.IcePhenomeniaState
	}
	return nil
}

func (x *Telegram) GetIcePhenomenias() []*IcePhenomenia {
	if x != nil {
		return x.IcePhenomenias
	}
	return nil
}

func (x *Telegram) GetIceHeight() *wrapperspb.Int32Value {
	if x != nil {
		return x.IceHeight
	}
	return nil
}

func (x *Telegram) GetSnowHeight() *wrapperspb.Int32Value {
	if x != nil {
		return x.SnowHeight
	}
	return nil
}

func (x *Telegram) GetWaterFlow() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WaterFlow
	}
	return nil
}

func (x *Telegram) GetPrecipitationValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PrecipitationValue
	}
	return nil
}

func (x *Telegram) GetPrecipitationDuration() *wrapperspb.Int32Value {
	if x != nil {
		return x.PrecipitationDuration
	}
	return nil
}

func (x *Telegram) GetReservoirDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReservoirDate
	}
	return nil
}

func (x *Telegram) GetHeadwaterLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.HeadwaterLevel
	}
	return nil
}

func (x *Telegram) GetAverageReservoirLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.AverageReservoirLevel
	}
	return nil
}

func (x *Telegram) GetDownstreamLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.DownstreamLevel
	}
	return nil
}

func (x *Telegram) GetReservoirVolume() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ReservoirVolume
	}
	return nil
}

func (x *Telegram) GetReservoirWaterInflowDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReservoirWaterInflowDate
	}
	return nil
}

func (x *Telegram) GetInflow() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Inflow
	}
	return nil
}

func (x *Telegram) GetReset_() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Reset_
	}
	return nil
}

type IcePhenomenia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phenomen  int32                  `protobuf:"varint,1,opt,name=phenomen,proto3" json:"phenomen,omitempty"` // енам надо
	Intensity *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=intensity,proto3" json:"intensity,omitempty"`
}

func (x *IcePhenomenia) Reset() {
	*x = IcePhenomenia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcePhenomenia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcePhenomenia) ProtoMessage() {}

func (x *IcePhenomenia) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcePhenomenia.ProtoReflect.Descriptor instead.
func (*IcePhenomenia) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{1}
}

func (x *IcePhenomenia) GetPhenomen() int32 {
	if x != nil {
		return x.Phenomen
	}
	return 0
}

func (x *IcePhenomenia) GetIntensity() *wrapperspb.Int32Value {
	if x != nil {
		return x.Intensity
	}
	return nil
}

type AddTelegramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AddTelegramRequest) Reset() {
	*x = AddTelegramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTelegramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTelegramRequest) ProtoMessage() {}

func (x *AddTelegramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTelegramRequest.ProtoReflect.Descriptor instead.
func (*AddTelegramRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{2}
}

func (x *AddTelegramRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AddTelegramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telegrams []*Telegram `protobuf:"bytes,1,rep,name=telegrams,proto3" json:"telegrams,omitempty"`
}

func (x *AddTelegramResponse) Reset() {
	*x = AddTelegramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTelegramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTelegramResponse) ProtoMessage() {}

func (x *AddTelegramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTelegramResponse.ProtoReflect.Descriptor instead.
func (*AddTelegramResponse) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{3}
}

func (x *AddTelegramResponse) GetTelegrams() []*Telegram {
	if x != nil {
		return x.Telegrams
	}
	return nil
}

type RemoveTelegramsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveTelegramsRequest) Reset() {
	*x = RemoveTelegramsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTelegramsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTelegramsRequest) ProtoMessage() {}

func (x *RemoveTelegramsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTelegramsRequest.ProtoReflect.Descriptor instead.
func (*RemoveTelegramsRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveTelegramsRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type RemoveTelegramsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RemoveTelegramsResponse) Reset() {
	*x = RemoveTelegramsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTelegramsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTelegramsResponse) ProtoMessage() {}

func (x *RemoveTelegramsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTelegramsResponse.ProtoReflect.Descriptor instead.
func (*RemoveTelegramsResponse) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveTelegramsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateTelegramByInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telegram *Telegram `protobuf:"bytes,1,opt,name=telegram,proto3" json:"telegram,omitempty"`
}

func (x *UpdateTelegramByInfoRequest) Reset() {
	*x = UpdateTelegramByInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelegramByInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelegramByInfoRequest) ProtoMessage() {}

func (x *UpdateTelegramByInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelegramByInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateTelegramByInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTelegramByInfoRequest) GetTelegram() *Telegram {
	if x != nil {
		return x.Telegram
	}
	return nil
}

type UpdateTelegramByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TelegramCode string `protobuf:"bytes,2,opt,name=telegram_code,json=telegramCode,proto3" json:"telegram_code,omitempty"`
}

func (x *UpdateTelegramByCodeRequest) Reset() {
	*x = UpdateTelegramByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelegramByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelegramByCodeRequest) ProtoMessage() {}

func (x *UpdateTelegramByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelegramByCodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTelegramByCodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTelegramByCodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTelegramByCodeRequest) GetTelegramCode() string {
	if x != nil {
		return x.TelegramCode
	}
	return ""
}

type UpdateTelegramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telegram *Telegram `protobuf:"bytes,1,opt,name=telegram,proto3" json:"telegram,omitempty"`
}

func (x *UpdateTelegramResponse) Reset() {
	*x = UpdateTelegramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelegramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelegramResponse) ProtoMessage() {}

func (x *UpdateTelegramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelegramResponse.ProtoReflect.Descriptor instead.
func (*UpdateTelegramResponse) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTelegramResponse) GetTelegram() *Telegram {
	if x != nil {
		return x.Telegram
	}
	return nil
}

type GetTelegramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTelegramRequest) Reset() {
	*x = GetTelegramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelegramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelegramRequest) ProtoMessage() {}

func (x *GetTelegramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelegramRequest.ProtoReflect.Descriptor instead.
func (*GetTelegramRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTelegramRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTelegramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telegram *Telegram `protobuf:"bytes,1,opt,name=Telegram,proto3" json:"Telegram,omitempty"`
}

func (x *GetTelegramResponse) Reset() {
	*x = GetTelegramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelegramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelegramResponse) ProtoMessage() {}

func (x *GetTelegramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelegramResponse.ProtoReflect.Descriptor instead.
func (*GetTelegramResponse) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetTelegramResponse) GetTelegram() *Telegram {
	if x != nil {
		return x.Telegram
	}
	return nil
}

type GetTelegramsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTelegramsRequest) Reset() {
	*x = GetTelegramsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelegramsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelegramsRequest) ProtoMessage() {}

func (x *GetTelegramsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelegramsRequest.ProtoReflect.Descriptor instead.
func (*GetTelegramsRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{11}
}

type GetTelegramsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telegrams []*Telegram `protobuf:"bytes,1,rep,name=telegrams,proto3" json:"telegrams,omitempty"`
}

func (x *GetTelegramsResponse) Reset() {
	*x = GetTelegramsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelegramsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelegramsResponse) ProtoMessage() {}

func (x *GetTelegramsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelegramsResponse.ProtoReflect.Descriptor instead.
func (*GetTelegramsResponse) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetTelegramsResponse) GetTelegrams() []*Telegram {
	if x != nil {
		return x.Telegrams
	}
	return nil
}

type TransferToSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferToSystemRequest) Reset() {
	*x = TransferToSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToSystemRequest) ProtoMessage() {}

func (x *TransferToSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToSystemRequest.ProtoReflect.Descriptor instead.
func (*TransferToSystemRequest) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{13}
}

type TransferToSystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TransferToSystemResponse) Reset() {
	*x = TransferToSystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_hydrology_buffer_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToSystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToSystemResponse) ProtoMessage() {}

func (x *TransferToSystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_hydrology_buffer_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToSystemResponse.ProtoReflect.Descriptor instead.
func (*TransferToSystemResponse) Descriptor() ([]byte, []int) {
	return file_proto_hydrology_buffer_service_proto_rawDescGZIP(), []int{14}
}

func (x *TransferToSystemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_proto_hydrology_buffer_service_proto protoreflect.FileDescriptor

var file_proto_hydrology_buffer_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x12, 0x4a, 0x0a,
	0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x47, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6f, 0x6e, 0x32, 0x30, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x32, 0x30, 0x68, 0x12, 0x49, 0x0a, 0x11, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x69,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x14,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x69, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x63, 0x65, 0x50, 0x68, 0x65, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x69, 0x61, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x63, 0x65, 0x50, 0x68, 0x65, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x69, 0x61, 0x52, 0x0e, 0x69, 0x63, 0x65, 0x50, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x63, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x6e, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3b,
	0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x4d, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x10,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69,
	0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x59, 0x0a,
	0x1b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x32,
	0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x22, 0x66, 0x0a, 0x0d, 0x49, 0x63, 0x65, 0x50, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x69, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x12,
	0x39, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22, 0x28, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33,
	0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x52, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x64, 0x72,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x24,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x09, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x37, 0x0a, 0x12, 0x49,
	0x63, 0x65, 0x50, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x2a, 0xb3, 0x01, 0x0a, 0x0a, 0x53, 0x6e, 0x6f, 0x77, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x35, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x30, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x31, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x35, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x31, 0x36, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x30, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x32, 0x31, 0x5f, 0x54, 0x4f, 0x5f,
	0x32, 0x35, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x32, 0x36, 0x5f,
	0x54, 0x4f, 0x5f, 0x33, 0x35, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x33, 0x36, 0x5f, 0x54, 0x4f, 0x5f, 0x35, 0x30, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x35, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x37, 0x30, 0x10, 0x08, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x37, 0x30, 0x10, 0x09, 0x2a, 0x6f, 0x0a, 0x15, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x33, 0x5f, 0x54, 0x4f, 0x5f, 0x36, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x36, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x32, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x31, 0x32, 0x10, 0x05, 0x32, 0xd6, 0x05, 0x0a, 0x16,
	0x48, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x79, 0x64,
	0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x27, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68,
	0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c,
	0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68,
	0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e,
	0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x79,
	0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24,
	0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x28, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x79, 0x64, 0x72,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x49, 0x41, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x6b, 0x61,
	0x67, 0x65, 0x2f, 0x48, 0x4c, 0x2d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_hydrology_buffer_service_proto_rawDescOnce sync.Once
	file_proto_hydrology_buffer_service_proto_rawDescData = file_proto_hydrology_buffer_service_proto_rawDesc
)

func file_proto_hydrology_buffer_service_proto_rawDescGZIP() []byte {
	file_proto_hydrology_buffer_service_proto_rawDescOnce.Do(func() {
		file_proto_hydrology_buffer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_hydrology_buffer_service_proto_rawDescData)
	})
	return file_proto_hydrology_buffer_service_proto_rawDescData
}

var file_proto_hydrology_buffer_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_hydrology_buffer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_hydrology_buffer_service_proto_goTypes = []interface{}{
	(IcePhenomeniaState)(0),             // 0: hydrologybuffer.IcePhenomeniaState
	(SnowHeight)(0),                     // 1: hydrologybuffer.SnowHeight
	(PrecipitationDuration)(0),          // 2: hydrologybuffer.PrecipitationDuration
	(*Telegram)(nil),                    // 3: hydrologybuffer.Telegram
	(*IcePhenomenia)(nil),               // 4: hydrologybuffer.IcePhenomenia
	(*AddTelegramRequest)(nil),          // 5: hydrologybuffer.AddTelegramRequest
	(*AddTelegramResponse)(nil),         // 6: hydrologybuffer.AddTelegramResponse
	(*RemoveTelegramsRequest)(nil),      // 7: hydrologybuffer.RemoveTelegramsRequest
	(*RemoveTelegramsResponse)(nil),     // 8: hydrologybuffer.RemoveTelegramsResponse
	(*UpdateTelegramByInfoRequest)(nil), // 9: hydrologybuffer.UpdateTelegramByInfoRequest
	(*UpdateTelegramByCodeRequest)(nil), // 10: hydrologybuffer.UpdateTelegramByCodeRequest
	(*UpdateTelegramResponse)(nil),      // 11: hydrologybuffer.UpdateTelegramResponse
	(*GetTelegramRequest)(nil),          // 12: hydrologybuffer.GetTelegramRequest
	(*GetTelegramResponse)(nil),         // 13: hydrologybuffer.GetTelegramResponse
	(*GetTelegramsRequest)(nil),         // 14: hydrologybuffer.GetTelegramsRequest
	(*GetTelegramsResponse)(nil),        // 15: hydrologybuffer.GetTelegramsResponse
	(*TransferToSystemRequest)(nil),     // 16: hydrologybuffer.TransferToSystemRequest
	(*TransferToSystemResponse)(nil),    // 17: hydrologybuffer.TransferToSystemResponse
	(*timestamppb.Timestamp)(nil),       // 18: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),       // 19: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),      // 20: google.protobuf.DoubleValue
}
var file_proto_hydrology_buffer_service_proto_depIdxs = []int32{
	18, // 0: hydrologybuffer.Telegram.datetime:type_name -> google.protobuf.Timestamp
	19, // 1: hydrologybuffer.Telegram.water_level_on_time:type_name -> google.protobuf.Int32Value
	19, // 2: hydrologybuffer.Telegram.delta_water_level:type_name -> google.protobuf.Int32Value
	19, // 3: hydrologybuffer.Telegram.water_level_on20h:type_name -> google.protobuf.Int32Value
	20, // 4: hydrologybuffer.Telegram.water_temperature:type_name -> google.protobuf.DoubleValue
	19, // 5: hydrologybuffer.Telegram.air_temperature:type_name -> google.protobuf.Int32Value
	19, // 6: hydrologybuffer.Telegram.ice_phenomenia_state:type_name -> google.protobuf.Int32Value
	4,  // 7: hydrologybuffer.Telegram.ice_phenomenias:type_name -> hydrologybuffer.IcePhenomenia
	19, // 8: hydrologybuffer.Telegram.ice_height:type_name -> google.protobuf.Int32Value
	19, // 9: hydrologybuffer.Telegram.snow_height:type_name -> google.protobuf.Int32Value
	20, // 10: hydrologybuffer.Telegram.water_flow:type_name -> google.protobuf.DoubleValue
	20, // 11: hydrologybuffer.Telegram.precipitation_value:type_name -> google.protobuf.DoubleValue
	19, // 12: hydrologybuffer.Telegram.precipitation_duration:type_name -> google.protobuf.Int32Value
	18, // 13: hydrologybuffer.Telegram.reservoir_date:type_name -> google.protobuf.Timestamp
	19, // 14: hydrologybuffer.Telegram.headwater_level:type_name -> google.protobuf.Int32Value
	19, // 15: hydrologybuffer.Telegram.average_reservoir_level:type_name -> google.protobuf.Int32Value
	19, // 16: hydrologybuffer.Telegram.downstream_level:type_name -> google.protobuf.Int32Value
	20, // 17: hydrologybuffer.Telegram.reservoir_volume:type_name -> google.protobuf.DoubleValue
	18, // 18: hydrologybuffer.Telegram.reservoir_water_inflow_date:type_name -> google.protobuf.Timestamp
	20, // 19: hydrologybuffer.Telegram.inflow:type_name -> google.protobuf.DoubleValue
	20, // 20: hydrologybuffer.Telegram.reset:type_name -> google.protobuf.DoubleValue
	19, // 21: hydrologybuffer.IcePhenomenia.intensity:type_name -> google.protobuf.Int32Value
	3,  // 22: hydrologybuffer.AddTelegramResponse.telegrams:type_name -> hydrologybuffer.Telegram
	3,  // 23: hydrologybuffer.UpdateTelegramByInfoRequest.telegram:type_name -> hydrologybuffer.Telegram
	3,  // 24: hydrologybuffer.UpdateTelegramResponse.telegram:type_name -> hydrologybuffer.Telegram
	3,  // 25: hydrologybuffer.GetTelegramResponse.Telegram:type_name -> hydrologybuffer.Telegram
	3,  // 26: hydrologybuffer.GetTelegramsResponse.telegrams:type_name -> hydrologybuffer.Telegram
	5,  // 27: hydrologybuffer.HydrologyBufferService.AddTelegram:input_type -> hydrologybuffer.AddTelegramRequest
	7,  // 28: hydrologybuffer.HydrologyBufferService.RemoveTelegrams:input_type -> hydrologybuffer.RemoveTelegramsRequest
	9,  // 29: hydrologybuffer.HydrologyBufferService.UpdateTelegramByInfo:input_type -> hydrologybuffer.UpdateTelegramByInfoRequest
	10, // 30: hydrologybuffer.HydrologyBufferService.UpdateTelegramByCode:input_type -> hydrologybuffer.UpdateTelegramByCodeRequest
	12, // 31: hydrologybuffer.HydrologyBufferService.GetTelegram:input_type -> hydrologybuffer.GetTelegramRequest
	14, // 32: hydrologybuffer.HydrologyBufferService.GetTelegrams:input_type -> hydrologybuffer.GetTelegramsRequest
	16, // 33: hydrologybuffer.HydrologyBufferService.TransferToSystem:input_type -> hydrologybuffer.TransferToSystemRequest
	6,  // 34: hydrologybuffer.HydrologyBufferService.AddTelegram:output_type -> hydrologybuffer.AddTelegramResponse
	8,  // 35: hydrologybuffer.HydrologyBufferService.RemoveTelegrams:output_type -> hydrologybuffer.RemoveTelegramsResponse
	11, // 36: hydrologybuffer.HydrologyBufferService.UpdateTelegramByInfo:output_type -> hydrologybuffer.UpdateTelegramResponse
	11, // 37: hydrologybuffer.HydrologyBufferService.UpdateTelegramByCode:output_type -> hydrologybuffer.UpdateTelegramResponse
	13, // 38: hydrologybuffer.HydrologyBufferService.GetTelegram:output_type -> hydrologybuffer.GetTelegramResponse
	15, // 39: hydrologybuffer.HydrologyBufferService.GetTelegrams:output_type -> hydrologybuffer.GetTelegramsResponse
	17, // 40: hydrologybuffer.HydrologyBufferService.TransferToSystem:output_type -> hydrologybuffer.TransferToSystemResponse
	34, // [34:41] is the sub-list for method output_type
	27, // [27:34] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_proto_hydrology_buffer_service_proto_init() }
func file_proto_hydrology_buffer_service_proto_init() {
	if File_proto_hydrology_buffer_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_hydrology_buffer_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telegram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcePhenomenia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTelegramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTelegramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTelegramsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTelegramsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelegramByInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelegramByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelegramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelegramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelegramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelegramsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelegramsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_hydrology_buffer_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToSystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_hydrology_buffer_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_hydrology_buffer_service_proto_goTypes,
		DependencyIndexes: file_proto_hydrology_buffer_service_proto_depIdxs,
		EnumInfos:         file_proto_hydrology_buffer_service_proto_enumTypes,
		MessageInfos:      file_proto_hydrology_buffer_service_proto_msgTypes,
	}.Build()
	File_proto_hydrology_buffer_service_proto = out.File
	file_proto_hydrology_buffer_service_proto_rawDesc = nil
	file_proto_hydrology_buffer_service_proto_goTypes = nil
	file_proto_hydrology_buffer_service_proto_depIdxs = nil
}
