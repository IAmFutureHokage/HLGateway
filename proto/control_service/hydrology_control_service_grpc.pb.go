// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: control_service/hydrology_control_service.proto

package HL_ControlService_Go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HydrologyStatsService_AddControlValue_FullMethodName    = "/hydrologycontrol.HydrologyStatsService/AddControlValue"
	HydrologyStatsService_RemoveControlValue_FullMethodName = "/hydrologycontrol.HydrologyStatsService/RemoveControlValue"
	HydrologyStatsService_UpdateControlValue_FullMethodName = "/hydrologycontrol.HydrologyStatsService/UpdateControlValue"
	HydrologyStatsService_GetControlValues_FullMethodName   = "/hydrologycontrol.HydrologyStatsService/GetControlValues"
	HydrologyStatsService_CheckWaterLevel_FullMethodName    = "/hydrologycontrol.HydrologyStatsService/CheckWaterLevel"
	HydrologyStatsService_GetStats_FullMethodName           = "/hydrologycontrol.HydrologyStatsService/GetStats"
)

// HydrologyStatsServiceClient is the client API for HydrologyStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HydrologyStatsServiceClient interface {
	AddControlValue(ctx context.Context, in *AddControlValueRequest, opts ...grpc.CallOption) (*AddControlValueResponse, error)
	RemoveControlValue(ctx context.Context, in *RemoveControlValueRequest, opts ...grpc.CallOption) (*RemoveControlValueResponse, error)
	UpdateControlValue(ctx context.Context, in *UpdateControlValueRequest, opts ...grpc.CallOption) (*UpdateControlValueResponse, error)
	GetControlValues(ctx context.Context, in *GetControlValuesRequest, opts ...grpc.CallOption) (*GetControlValuesResponse, error)
	CheckWaterLevel(ctx context.Context, in *CheckWaterLevelRequest, opts ...grpc.CallOption) (*CheckWaterLevelResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type hydrologyStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHydrologyStatsServiceClient(cc grpc.ClientConnInterface) HydrologyStatsServiceClient {
	return &hydrologyStatsServiceClient{cc}
}

func (c *hydrologyStatsServiceClient) AddControlValue(ctx context.Context, in *AddControlValueRequest, opts ...grpc.CallOption) (*AddControlValueResponse, error) {
	out := new(AddControlValueResponse)
	err := c.cc.Invoke(ctx, HydrologyStatsService_AddControlValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyStatsServiceClient) RemoveControlValue(ctx context.Context, in *RemoveControlValueRequest, opts ...grpc.CallOption) (*RemoveControlValueResponse, error) {
	out := new(RemoveControlValueResponse)
	err := c.cc.Invoke(ctx, HydrologyStatsService_RemoveControlValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyStatsServiceClient) UpdateControlValue(ctx context.Context, in *UpdateControlValueRequest, opts ...grpc.CallOption) (*UpdateControlValueResponse, error) {
	out := new(UpdateControlValueResponse)
	err := c.cc.Invoke(ctx, HydrologyStatsService_UpdateControlValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyStatsServiceClient) GetControlValues(ctx context.Context, in *GetControlValuesRequest, opts ...grpc.CallOption) (*GetControlValuesResponse, error) {
	out := new(GetControlValuesResponse)
	err := c.cc.Invoke(ctx, HydrologyStatsService_GetControlValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyStatsServiceClient) CheckWaterLevel(ctx context.Context, in *CheckWaterLevelRequest, opts ...grpc.CallOption) (*CheckWaterLevelResponse, error) {
	out := new(CheckWaterLevelResponse)
	err := c.cc.Invoke(ctx, HydrologyStatsService_CheckWaterLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyStatsServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, HydrologyStatsService_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HydrologyStatsServiceServer is the server API for HydrologyStatsService service.
// All implementations must embed UnimplementedHydrologyStatsServiceServer
// for forward compatibility
type HydrologyStatsServiceServer interface {
	AddControlValue(context.Context, *AddControlValueRequest) (*AddControlValueResponse, error)
	RemoveControlValue(context.Context, *RemoveControlValueRequest) (*RemoveControlValueResponse, error)
	UpdateControlValue(context.Context, *UpdateControlValueRequest) (*UpdateControlValueResponse, error)
	GetControlValues(context.Context, *GetControlValuesRequest) (*GetControlValuesResponse, error)
	CheckWaterLevel(context.Context, *CheckWaterLevelRequest) (*CheckWaterLevelResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedHydrologyStatsServiceServer()
}

// UnimplementedHydrologyStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHydrologyStatsServiceServer struct {
}

func (UnimplementedHydrologyStatsServiceServer) AddControlValue(context.Context, *AddControlValueRequest) (*AddControlValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddControlValue not implemented")
}
func (UnimplementedHydrologyStatsServiceServer) RemoveControlValue(context.Context, *RemoveControlValueRequest) (*RemoveControlValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveControlValue not implemented")
}
func (UnimplementedHydrologyStatsServiceServer) UpdateControlValue(context.Context, *UpdateControlValueRequest) (*UpdateControlValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateControlValue not implemented")
}
func (UnimplementedHydrologyStatsServiceServer) GetControlValues(context.Context, *GetControlValuesRequest) (*GetControlValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlValues not implemented")
}
func (UnimplementedHydrologyStatsServiceServer) CheckWaterLevel(context.Context, *CheckWaterLevelRequest) (*CheckWaterLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWaterLevel not implemented")
}
func (UnimplementedHydrologyStatsServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedHydrologyStatsServiceServer) mustEmbedUnimplementedHydrologyStatsServiceServer() {}

// UnsafeHydrologyStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HydrologyStatsServiceServer will
// result in compilation errors.
type UnsafeHydrologyStatsServiceServer interface {
	mustEmbedUnimplementedHydrologyStatsServiceServer()
}

func RegisterHydrologyStatsServiceServer(s grpc.ServiceRegistrar, srv HydrologyStatsServiceServer) {
	s.RegisterService(&HydrologyStatsService_ServiceDesc, srv)
}

func _HydrologyStatsService_AddControlValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddControlValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyStatsServiceServer).AddControlValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyStatsService_AddControlValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyStatsServiceServer).AddControlValue(ctx, req.(*AddControlValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyStatsService_RemoveControlValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveControlValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyStatsServiceServer).RemoveControlValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyStatsService_RemoveControlValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyStatsServiceServer).RemoveControlValue(ctx, req.(*RemoveControlValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyStatsService_UpdateControlValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateControlValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyStatsServiceServer).UpdateControlValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyStatsService_UpdateControlValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyStatsServiceServer).UpdateControlValue(ctx, req.(*UpdateControlValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyStatsService_GetControlValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyStatsServiceServer).GetControlValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyStatsService_GetControlValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyStatsServiceServer).GetControlValues(ctx, req.(*GetControlValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyStatsService_CheckWaterLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWaterLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyStatsServiceServer).CheckWaterLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyStatsService_CheckWaterLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyStatsServiceServer).CheckWaterLevel(ctx, req.(*CheckWaterLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyStatsService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyStatsServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyStatsService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyStatsServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HydrologyStatsService_ServiceDesc is the grpc.ServiceDesc for HydrologyStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HydrologyStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hydrologycontrol.HydrologyStatsService",
	HandlerType: (*HydrologyStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddControlValue",
			Handler:    _HydrologyStatsService_AddControlValue_Handler,
		},
		{
			MethodName: "RemoveControlValue",
			Handler:    _HydrologyStatsService_RemoveControlValue_Handler,
		},
		{
			MethodName: "UpdateControlValue",
			Handler:    _HydrologyStatsService_UpdateControlValue_Handler,
		},
		{
			MethodName: "GetControlValues",
			Handler:    _HydrologyStatsService_GetControlValues_Handler,
		},
		{
			MethodName: "CheckWaterLevel",
			Handler:    _HydrologyStatsService_CheckWaterLevel_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _HydrologyStatsService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_service/hydrology_control_service.proto",
}
